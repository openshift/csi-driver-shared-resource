// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/openshift/api/sharedresource/v1alpha1"
	sharedresourcev1alpha1 "github.com/openshift/client-go/sharedresource/applyconfigurations/sharedresource/v1alpha1"
	typedsharedresourcev1alpha1 "github.com/openshift/client-go/sharedresource/clientset/versioned/typed/sharedresource/v1alpha1"
	gentype "k8s.io/client-go/gentype"
)

// fakeSharedSecrets implements SharedSecretInterface
type fakeSharedSecrets struct {
	*gentype.FakeClientWithListAndApply[*v1alpha1.SharedSecret, *v1alpha1.SharedSecretList, *sharedresourcev1alpha1.SharedSecretApplyConfiguration]
	Fake *FakeSharedresourceV1alpha1
}

func newFakeSharedSecrets(fake *FakeSharedresourceV1alpha1) typedsharedresourcev1alpha1.SharedSecretInterface {
	return &fakeSharedSecrets{
		gentype.NewFakeClientWithListAndApply[*v1alpha1.SharedSecret, *v1alpha1.SharedSecretList, *sharedresourcev1alpha1.SharedSecretApplyConfiguration](
			fake.Fake,
			"",
			v1alpha1.SchemeGroupVersion.WithResource("sharedsecrets"),
			v1alpha1.SchemeGroupVersion.WithKind("SharedSecret"),
			func() *v1alpha1.SharedSecret { return &v1alpha1.SharedSecret{} },
			func() *v1alpha1.SharedSecretList { return &v1alpha1.SharedSecretList{} },
			func(dst, src *v1alpha1.SharedSecretList) { dst.ListMeta = src.ListMeta },
			func(list *v1alpha1.SharedSecretList) []*v1alpha1.SharedSecret {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1alpha1.SharedSecretList, items []*v1alpha1.SharedSecret) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
